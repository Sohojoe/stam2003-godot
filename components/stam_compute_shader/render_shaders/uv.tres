[gd_resource type="Shader" format=3 uid="uid://fjtbpme5b4s8"]

[resource]
code = "shader_type canvas_item;

uniform float u_buffer[16384];
uniform float v_buffer[16384];
uniform float color_scale = 1.;

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
    //vec2 uv = FRAGCOORD.xy / SCREEN_PIXEL_SIZE;
	//vec2 point_coord = POINT_COORD;
	//vec2 local_pos = VERTEX / SCREEN_PIXEL_SIZE;
    vec2 tex_coords = UV;
    // Scale UV coordinates to buffer size
    int x = int(tex_coords.x * 128.0);
    int y = int(tex_coords.y * 128.0);

    // Calculate the 1D index from 2D coordinates
    int idx = y * 128 + x;
    float u = u_buffer[idx];
    float v = v_buffer[idx];
	u = min(u / color_scale, 1.);
	v = min(v / color_scale, 1.);

    // Calculate magnitude and direction
    float magnitude = sqrt(u * u + v * v);
    float direction = atan(v, u);  // Range from -PI to PI

    // Normalize direction to [0, 1] range for hue
    float hue = (direction + PI) / (2.0 * PI);
    float saturation = 1.0;
    float value = magnitude;  // Assuming magnitude is already normalized, otherwise, you may need to normalize it

    // Convert HSV to RGB
    vec3 rgb = hsv2rgb(vec3(hue, saturation, value));
    COLOR = vec4(rgb, 1.0);
}
"
