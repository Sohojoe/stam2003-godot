[gd_resource type="Shader" format=3 uid="uid://dgq1flrxswtta"]

[resource]
code = "shader_type canvas_item;

uniform float div_buffer[16384];
uniform int grid_size_n = 64;
uniform float color_scale = 1.;

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
    //vec2 uv = FRAGCOORD.xy / SCREEN_PIXEL_SIZE;
	//vec2 point_coord = POINT_COORD;
	//vec2 local_pos = VERTEX / SCREEN_PIXEL_SIZE;
    vec2 tex_coords = UV;
    // Scale UV coordinates to buffer size
    int x = int(tex_coords.x * float(grid_size_n));
    int y = int(tex_coords.y * float(grid_size_n));

    // Calculate the 1D index from 2D coordinates
    int idx = y * 128 + x;
    float div = div_buffer[idx];
	div = min(div / color_scale, 1.);

    float r = 0.;
    float g = 0.;
    float b = 0.;

    if (div < 0.0) {
        r = 0.0; g = -div; b = -div;
    } else {
        r = div; g = div; b = 0.0;  //  positive divergence
    }
    COLOR = vec4(r, g, b, 1.0);
}
"
